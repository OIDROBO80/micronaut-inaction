name: pr
on:
  push:
    branches: [ master ]
env:
  environment: "qa"
  aws_region: "us-east-1"
  service: "cad-matrix-template"
  cluster: "private"
  load-balancer: "oc-nlb-0"
  task-definition-path: "pipeline/dev-task-definition-virginia.json"
  dockerfile-path: "docker/develop-virginia.dockerfile"
  target-group: "cad-matrix-template"
  language: "java"
  coverage:

jobs:
  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  validation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1
  test:
    needs: validation
    name: Running Tests
    runs-on: ubuntu-latest
    container: gradle:jdk11
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Run detekt, ktlint and tests
      - name: Run Linters and Test
        run: ./gradlew check

      - name: Run Test
        run: ./gradlew test
      - name: Persist Data
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build
          retention-days: 1

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Checking Sonar Action
        uses: actions/checkout@v2
        with:
          repository: bancodebogota/bbog-dig-sonarcloud-pipeline
          ref: 0.0.19
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bbog-dig-sonarcloud-pipeline
      - name: Restore Data
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build/
      - name: Current Branch
        shell: bash
        id: long-lived-branch
        run: |
          CURRENT_BRANCH=$(echo ${GITHUB_REF#refs/heads/})
          if [ "$CURRENT_BRANCH" != "master" ] && [ "$CURRENT_BRANCH" != "staging" ] && [ "$CURRENT_BRANCH" != "qa" ]
          then
            CURRENT_BRANCH="qa"
          fi
          echo "##[set-output name=branch;]$(echo ${CURRENT_BRANCH})"
          echo "Sonar Branch report => " ${CURRENT_BRANCH}
      - name: SonarCloud Scanner
        uses: ./.github/actions/bbog-dig-sonarcloud-pipeline
        with:
          language: ${{ env.language }}
          current-branch: ${{ steps.long-lived-branch.outputs.branch }}
          access-token: ${{ secrets.SONAR_CLOUD_TOKEN }}
          project-name: ${{ github.event.repository.name }}
          project-key: ${{ github.event.repository.name }}
          sonar-project-properties-file: 'sonar-project-custom.properties'
  build:
    name: Build with GraalVM
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup SDK Man
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
      - name: Setup GraalVM
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install java 21.2.0.r11-grl -y
          export PATH=$PATH:$HOME/.sdkman/candidates/java/current/bin/
      - name: Install Native Image
        run: |
          export PATH=$PATH:$HOME/.sdkman/candidates/java/current/bin/
          gu install native-image
      - name: Build Native Image
        run: |
          export JAVA_HOME=$HOME/.sdkman/candidates/java/current/
          ./gradlew nativeImage --stacktrace
      - name: Persist Data
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            build/
          retention-days: 1

  pr-deploy-virginia:
    name: Deploy to AWS Virginia
    runs-on: ubuntu-latest
    needs: [sonar, build]
    environment: pr
    steps:
      - uses: actions/checkout@v2
      - name: Restore Data
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build/
      - name: Checking LabActions
        uses: actions/checkout@v2
        with:
          repository: bancodebogota/bdb-dig-do-pipelines-action-ecs-IaC
          ref: ''
          token: ${{ secrets.CA_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-pipelines-action-ecs-IaC
      - name: Deploy ECS
        uses: ./.github/actions/bdb-dig-do-pipelines-action-ecs-IaC
        with:
          image: ${{ env.service }}
          service: ${{ env.service }}
          task-definition-path: ${{ env.task-definition-path }}
          cluster: ${{ env.cluster }}
          stop-tasks: "true"
          version: ${{ github.sha }}
          desired-task-count: 1
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          dockerfile-path: ${{ env.dockerfile-path }}
          aws-region: ${{ env.aws_region}}
          load-balancer-name: ${{ env.load-balancer}}
          target-group-name: ${{ env.target-group}}
